// Generated by CoffeeScript 1.10.0
(function() {
  var Achievement, Building, Spell, SummonGolem, Upgrade, achievementCheck, buildingInsert, game, initAchievements, initBuildings, initMagic, initStuff, initUpgrades, numberShortener, potatoGet, potatoTick, round, sacrifice, upgrades,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  initAchievements = function() {
    game.achievements = [];
    return game.achievements[0] = new Achievement("test achievement", function() {
      return game.potatoCount > 0;
    }, "yeah whatever", "dank reference goes here");
  };

  Achievement = (function() {
    function Achievement(name, requirements, description, flavour_text) {
      this.name = name;
      this.requirements = requirements;
      this.description = description;
      this.flavour_text = flavour_text;
      this.tryUnlock = bind(this.tryUnlock, this);
      this.unlocked = false;
    }

    Achievement.prototype.tryUnlock = function() {
      if (this.requirements() && !this.unlocked) {
        console.log("achievement unlocked " + this.name);
        return this.unlocked = true;
      }
    };

    return Achievement;

  })();

  achievementCheck = function() {
    var i, j, len, ref, results;
    ref = game.achievements;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (!i.unlocked) {
        results.push(i.tryUnlock);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  initBuildings = function() {
    return game.buildings = [];
  };

  Building = (function() {
    function Building(name, cost1, modifier1, buttonID1, bDesc) {
      this.name = name;
      this.cost = cost1;
      this.modifier = modifier1;
      this.buttonID = buttonID1;
      this.bDesc = bDesc;
      this.built = false;
      this.amount = 0;
    }

    Building.prototype.purchase = function() {
      if (this.getCost() <= game.potatoCount) {
        this.built = true;
        this.amount += 1;
        game.potatoCount -= this.getCost();
        return this.increaseCost();
      } else {
        return console.log("Not enough resources?");
      }
    };

    Building.prototype.getMod = function() {
      return this.modifier;
    };

    Building.prototype.isBuilt = function() {
      return this.built;
    };

    Building.prototype.getName = function() {
      return this.name;
    };

    Building.prototype.getCost = function() {
      return this.cost;
    };

    Building.prototype.getNum = function() {
      return this.amount;
    };

    Building.prototype.getButtonId = function() {
      return this.buttonID;
    };

    Building.prototype.getDesc = function() {
      return this.bDesc;
    };

    Building.prototype.increaseCost = function() {
      return this.cost = this.cost * 1.15;
    };

    Building.prototype.setMod = function(number) {
      return this.modifier = number;
    };

    Building.prototype.placeholder = function() {
      return console.log("DO NOTHING");
    };

    return Building;

  })();

  buildingInsert = function(type, cost, modifier, buttonID, bD) {
    var built, i, j, len, ref, temp;
    built = false;
    if (game.buildings.length !== 0) {
      ref = game.buildings;
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.getName() === type) {
          i.purchase();
          built = true;
        }
      }
    }
    if (!built) {
      temp = new Building(type, cost, modifier, buttonID, bD);
      console.log(temp.getCost());
      if (!(game.potatoCount < temp.getCost())) {
        game.buildings.push(temp);
        return temp.purchase();
      }
    }
  };

  initMagic = function() {
    return game.spells["golem"] = new SummonGolem;
  };

  Spell = (function() {
    function Spell(name) {
      this.name = name;
      this.cast = bind(this.cast, this);
      this.tick = bind(this.tick, this);
      this.expiration = bind(this.expiration, this);
      this.effect = bind(this.effect, this);
      this.description;
      this.cost;
      this.duration;
      ({
        duration_cur: 0
      });
    }

    Spell.prototype.effect = function() {
      return this.tick();
    };

    Spell.prototype.expiration = function() {
      return this.duration_cur = 0;
    };

    Spell.prototype.tick = function() {
      if (this.duration_cur > 0) {
        this.duration_cur -= 1;
        return setTimeout(this.tick, 1000);
      } else {
        return this.expiration();
      }
    };

    Spell.prototype.cast = function() {
      if (!(mana < this.cost && this.duration_cur > 0)) {
        this.duration_cur = this.duration;
        mana -= this.cost;
        return this.effect();
      }
    };

    return Spell;

  })();

  SummonGolem = (function(superClass) {
    extend(SummonGolem, superClass);

    function SummonGolem() {
      this.expiration = bind(this.expiration, this);
      this.effect = bind(this.effect, this);
      SummonGolem.__super__.constructor.call(this, "golem");
    }

    SummonGolem.prototype.description = "summon potato golem to boost your production";

    SummonGolem.prototype.cost = 10;

    SummonGolem.prototype.duration = 60;

    SummonGolem.prototype.effect = function() {
      SummonGolem.__super__.effect.apply(this, arguments);
      return game.magicMultiplier += 0.15;
    };

    SummonGolem.prototype.expiration = function() {
      return game.magicMultiplier -= 0.15;
    };

    return SummonGolem;

  })(Spell);

  sacrifice = function(n) {
    if (!(game.potatoCount < n)) {
      game.mana += n;
      return game.potatoCount -= n;
    }
  };

  $(function() {
    var displayBuildings, initUi, listeners, uiUpdate;
    initUi = function() {
      $("#buttons").append("<input id='bFarm' type='button' value='Build a farm: 10'/>");
      $("#buttons").append("<input id='bFactory' type='button' value='Build a factory: 100'/>");
      $("#buttons").append("<input id='bKappa' type='button' value='Build a kappa: 500'/>");
      listeners();
      return setInterval(uiUpdate, 200);
    };
    displayBuildings = function() {
      var building, j, len, ref, results;
      $("#resourceDisplay").text("");
      ref = game.buildings;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        building = ref[j];
        results.push($("#resourceDisplay").append("<p>" + (building.getName()) + ": " + (building.getNum()) + "</p>"));
      }
      return results;
    };
    listeners = function() {
      $("#bFactory").on("click", function() {
        return buildingInsert("factory", 100, 10, "bFactory", "Build a factory");
      });
      $("#bKappa").on("click", function() {
        return buildingInsert("kappa", 500, 30, "bKappa", "Build a farm");
      });
      $("#bFarm").on("click", function() {
        return buildingInsert("farm", 10, 2, "bFarm", "Build a kappa");
      });
      $("#potatoGet").on("click", function() {
        return potatoGet();
      });

      /*the fuck is this
      $("button").on("click", ->
        uiUpdate())
       */
      $("#sacrifice1").on("click", function() {
        return sacrifice(1);
      });
      $("#spell1").on("click", function() {
        return game.spells["golem"].cast();
      });
      return $("#testUpgrade").on('click', function() {
        return upgrades[0].purchase();
      });
    };
    uiUpdate = function() {
      var building, j, len, ref;
      ref = game.buildings;
      for (j = 0, len = ref.length; j < len; j++) {
        building = ref[j];
        $("" + (building.getButtonId())).attr("value", (building.getDesc()) + " : " + (numberShortener(building.getCost())));
      }
      $("#label").text("Potatoes: " + (numberShortener(game.potatoCount)));
      $("#ps").text("Potatoes/second: " + (numberShortener(game.modifier)));
      $("#mana").text("mana: " + game.mana);
      $("#spellmod").text("" + (numberShortener(game.magicMultiplier)));
      return displayBuildings();
    };
    initStuff();
    return initUi();
  });

  upgrades = [];

  initUpgrades = function() {
    return upgrades[0] = new Upgrade("test", function() {
      return game.clickValue += 1;
    }, function() {
      return game.totalClicks > 0;
    }, function() {
      return game.potatoCount -= 10;
    }, function() {
      return game.potatoCount >= 10;
    });
  };

  Upgrade = (function() {
    function Upgrade(name, effect, prereqs, cost1, costCheck) {
      this.name = name;
      this.effect = effect;
      this.prereqs = prereqs;
      this.cost = cost1;
      this.costCheck = costCheck;
      this.purchase = bind(this.purchase, this);
      this.unlock = bind(this.unlock, this);
      this.unlocked = false;
      this.purchased = false;
    }

    Upgrade.prototype.unlock = function() {
      if (this.prereqs()) {
        return this.unlocked = true;
      }
    };

    Upgrade.prototype.purchase = function() {
      console.log(this);
      if (this.costCheck()) {
        this.cost();
        this.effect();
        return this.purchased = true;
      }
    };

    return Upgrade;

  })();

  game = {
    tickNum: 0,
    potatoCount: 0,
    cmTime: 50,
    modifier: 0,
    magicMultiplier: 1,
    mana: 0,
    spells: {},
    activeSpells: {},
    clickValue: 1,
    totalClicks: 0
  };

  initStuff = function() {
    initUpgrades();
    initBuildings();
    initAchievements();
    initMagic();
    return setInterval(function() {
      potatoTick();
      return achievementCheck();
    }, 1000);
  };


  /*
  copyMachine = ->
    if potatoUpgrades["copy_machine"] > 0
      if tickNum >= game.cmTime
        prob = Math.floor(Math.random() * 100)
        tickNum = 0
        if prob <= 80
          upgradeInsert("farm","cm")        
        else if prob <= 95
          upgradeInsert("factory","cm")       
        else
          upgradeInsert("kappa","cm")
      else
        tickNum+=1
   */

  potatoGet = function() {
    game.potatoCount += game.clickValue;
    game.totalClicks += 1;
    return $("#label").text("Potatoes: " + (numberShortener(game.potatoCount)));
  };

  potatoTick = function() {
    var building, j, len, modifier, ref;
    modifier = 0;
    ref = game.buildings;
    for (j = 0, len = ref.length; j < len; j++) {
      building = ref[j];
      modifier += building.getMod() * building.getNum();
    }
    return game.potatoCount += modifier * game.magicMultiplier;
  };

  round = function(number, n) {
    if (n == null) {
      n = 3;
    }
    if (n === 1) {
      return Math.round(number);
    }
    return Math.round(number * (Math.pow(10, n))) / (Math.pow(10, n));
  };

  numberShortener = function(number) {
    var arr, multiplier;
    if (number < 1000) {
      return round(number);
    }
    arr = ['K', 'M', 'B', 'T', 'Qa', 'Qi'];
    multiplier = 1;
    while (!((Math.pow(10, 3 * (multiplier + 1))) > number)) {
      multiplier += 1;
    }
    return "" + (round(number / (Math.pow(10, multiplier * 3)))) + arr[multiplier - 1];
  };

}).call(this);
