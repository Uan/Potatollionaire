// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $(function() {
    var Spell, SummonGolem, activeSpells, buttonValues, countConvert, initStuff, magicMultiplier, mana, modifier, potatoCount, potatoGet, potatoTick, potatoUpgrades, roundToTwo, sacrifice, showDict, spells, uiUpdate, upgradeCooficients, upgradeCosts, upgradeCostsN, upgradeInsert, upgradeNumbers, upgradeTypes;
    potatoCount = 0;
    potatoUpgrades = {};
    upgradeCooficients = {};
    upgradeCosts = {};
    upgradeTypes = ["farm", "factory", "kappa"];
    upgradeNumbers = [2, 5, 10];
    upgradeCostsN = [10, 100, 200];
    modifier = 0;
    magicMultiplier = 1;
    mana = 0;
    spells = {};
    activeSpells = {};
    initStuff = function() {
      var i, index, results;
      results = [];
      for (index = i = 0; i < 3; index = ++i) {
        potatoUpgrades[upgradeTypes[index]] = 0;
        upgradeCooficients[upgradeTypes[index]] = upgradeNumbers[index];
        results.push(upgradeCosts[upgradeTypes[index]] = upgradeCostsN[index]);
      }
      return results;
    };
    showDict = function() {
      console.log(upgradeCooficients);
      return console.log(potatoUpgrades);
    };
    potatoGet = function() {
      potatoCount += 1;
      return $("#label").text("Potatoes: " + (countConvert(potatoCount)));
    };
    potatoTick = function() {
      var i, len, type;
      modifier = 0;
      for (i = 0, len = upgradeTypes.length; i < len; i++) {
        type = upgradeTypes[i];
        modifier += potatoUpgrades[type] * upgradeCooficients[type];
      }
      return potatoCount += modifier * magicMultiplier;
    };
    uiUpdate = function() {
      $("#label").text("Potatoes: " + (countConvert(potatoCount)));
      $("#ps").text("Potatoes/second: " + (countConvert(modifier)));
      $("#mana").text("mana: " + mana);
      return $("#spellmod").text("" + magicMultiplier);
    };
    setInterval(potatoTick, 1000);
    setInterval(uiUpdate, 200);
    upgradeInsert = function(type) {
      var resCount;
      if (!(potatoCount < upgradeCosts[type])) {
        potatoUpgrades[type] = potatoUpgrades[type] += 1;
        potatoCount -= upgradeCosts[type];
        upgradeCosts[type] *= 2;
        upgradeCooficients[type] *= 1.5;
        resCount = potatoUpgrades[type];
        $("#resourceDisplay").append("<p>" + type + ": " + resCount + "</p>");
        return buttonValues();
      }
    };
    roundToTwo = function(number) {
      return Math.round(number * 10) / 10;
    };
    countConvert = function(number) {
      if (number >= 1000000000) {
        return roundToTwo(number / 1000000000) + "B";
      } else if (number >= 1000000) {
        return roundToTwo(number / 1000000) + "M";
      } else if (number >= 1000) {
        return roundToTwo(number / 1000) + "K";
      } else {
        return roundToTwo(number);
      }
    };
    Spell = (function() {
      function Spell(name) {
        this.name = name;
        this.cast = bind(this.cast, this);
        this.tick = bind(this.tick, this);
        this.expiration = bind(this.expiration, this);
        this.effect = bind(this.effect, this);
        this.description;
        this.cost;
        this.duration;
        ({
          duration_cur: 0
        });
      }

      Spell.prototype.effect = function() {
        return this.tick();
      };

      Spell.prototype.expiration = function() {
        return this.duration_cur = 0;
      };

      Spell.prototype.tick = function() {
        if (this.duration_cur > 0) {
          this.duration_cur -= 1;
          return setTimeout(this.tick, 1000);
        } else {
          return this.expiration();
        }
      };

      Spell.prototype.cast = function() {
        if (!(mana < this.cost)) {
          this.duration_cur = this.duration;
          mana -= this.cost;
          return this.effect();
        }
      };

      return Spell;

    })();
    SummonGolem = (function(superClass) {
      extend(SummonGolem, superClass);

      function SummonGolem() {
        this.expiration = bind(this.expiration, this);
        this.effect = bind(this.effect, this);
        SummonGolem.__super__.constructor.call(this, "golem");
      }

      SummonGolem.prototype.description = "summon potato golem to boost your production";

      SummonGolem.prototype.cost = 10;

      SummonGolem.prototype.duration = 60;

      SummonGolem.prototype.effect = function() {
        SummonGolem.__super__.effect.apply(this, arguments);
        return magicMultiplier += 0.15;
      };

      SummonGolem.prototype.expiration = function() {
        return magicMultiplier -= 0.15;
      };

      return SummonGolem;

    })(Spell);
    spells["golem"] = new SummonGolem;
    sacrifice = function(n) {
      if (!(potatoCount < n)) {
        mana += n;
        return potatoCount -= n;
      }
    };
    $("#sacrifice1").on("click", function() {
      return sacrifice(1);
    });
    $("#spell1").on("click", function() {
      return spells["golem"].cast();
    });
    buttonValues = function() {
      $("#upgradeBtnF").attr("value", "Build a Farm. Cost: " + (countConvert(upgradeCosts["farm"])));
      $("#upgradeBtnFa").attr("value", "Build a Factory. Cost: " + (countConvert(upgradeCosts["factory"])));
      return $("#upgradeBtnK").attr("value", "Build a Kappa. Cost: " + (countConvert(upgradeCosts["kappa"])));
    };
    $("#upgradeBtnFa").on("click", function() {
      return upgradeInsert("factory");
    });
    $("#upgradeBtnK").on("click", function() {
      return upgradeInsert("kappa");
    });
    $("#upgradeBtnF").on("click", function() {
      return upgradeInsert("farm");
    });
    $("#upgradeBtnFa").on("click", function() {
      return upgradeInsert("factory");
    });
    $("#upgradeBtnK").on("click", function() {
      return upgradeInsert("kappa");
    });
    $("#potatoGet").on("click", function() {
      return potatoGet();
    });
    $(":button").on("click", function() {
      return uiUpdate();
    });
    return initStuff();
  });

}).call(this);
